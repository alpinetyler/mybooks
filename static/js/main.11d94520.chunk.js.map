{"version":3,"sources":["redux/reducers/user.js","components/Headings.js","components/SignUp.js","components/LoginForm.js","components/LandingPage.js","components/EditExpense.js","components/ListExpenses.js","components/AddExpense.js","components/ShowMonthTotals.js","components/AddMonth.js","components/EnterExpense.js","components/EditFixedExpense.js","components/ListFixedExpenses.js","components/AddFixedExpense.js","components/FixedExpenses.js","components/AddCategory.js","components/EditCategories.js","components/ListReserveExpenses.js","components/AddReserveExpense.js","components/ReserveExpenses.js","routes.js","components/Header.js","App.js","redux/reducers/month.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["initialState","data","getUser","type","payload","axios","get","Headings","props","addRental","editRental","enterSearch","signUp","SignUp","handleChange","e","target","value","name","setState","handleClick","newUser","state","createUser","email","password","handleSubmit","login","post","then","res","rentals","alert","catch","err","console","log","this","user","className","style","styles","addForm","input","placeholder","onChange","icon","onClick","toggleSignup","Component","connect","width","padding","text","margin","fontFamily","boxShadow","border","borderBottom","fontSize","LoginForm","signup","loginInfo","logout","EditExpense","addCheck","ischecked","updatedExpense","expense","updateExpense","toggleEdit","id","date","amount","notes","category","total","fulldate","expenses","categories","params","userid","map","index","key","categoryname","colOne","colTwo","textAlign","paddingLeft","colThree","colFour","colFive","colSix","cursor","rightJustify","checkbox","formatter","Intl","NumberFormat","currency","minimumFractionDigits","ListExpense","edit","beginningBalance","format","running_total","deleteExpense","paddingRight","today","Date","getMonth","getDate","getFullYear","AddExpense","newExpense","createExpense","class","add","toggleAdd","toggleChange","saveButton","select","fontWeight","backgroundColor","color","year","month","ShowMonthTotals","totals","sum","toggleDisplay","AddMonth","monthnumber","newMonth","createMonth","monthname","years","beginningbalance","create","toggleCreate","EnterExpense","display","setMonth","monthlist","swal","title","buttons","cancel","dangerMode","willDelete","delete","handleClear","put","fixedexpenses","prevProps","prevState","LandingPage","EditFixedExpense","updatedFixedExpense","fixedexpense","updateFixedExpense","ListFixedExpenses","deleteFixedExpense","AddFixedExpense","newFixedExpense","createFixedExpense","FixedExpenses","forceUpdate","AddCategory","newCategory","createCategory","EditCategories","componentDidMount","deleteCategory","deleteReserveExpense","AddReserveExpense","newReserveExpense","createReserveExpense","ReserveExpenses","updateReserveExpense","exact","path","component","to","htmlFor","App","routes","loading","selected","combineReducers","action","createStore","reducer","applyMiddleware","promiseMiddleware","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.11d94520.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst GET_USER = 'GET_USER'\nconst GET_USER_FULFILLED = 'GET_USER_FULFILLED'\n\nconst LOGIN_USER = 'LOGIN_USER'\nconst LOGIN_USER_FULFILLED = 'LOGIN_USER_FULFILLED'\n\nconst LOGOUT_USER = 'LOGOUT_USER'\nconst LOGOUT_USER_FULFILLED = 'LOGOUT_USER_FULFILLED'\n\nconst initialState = {\n    data: null\n}\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case GET_USER_FULFILLED:\n           return { ...state, data: action.payload.data } \n\n        case LOGIN_USER_FULFILLED:\n            return { ...state, data: action.payload.data }\n\n        case LOGOUT_USER_FULFILLED:\n                return { ...state, data: null }\n        default:\n            return state\n    }\n}\n\nexport function getUser() {\n    return {\n        type: GET_USER,\n        payload: axios.get('/auth/currentUser')\n    }\n}\n\nexport function login(loginInfo) {\n    return {\n        type: LOGIN_USER,\n        payload: axios.post('/auth/login', loginInfo)\n    }\n}\n\nexport function logout() {\n    return {\n        type: LOGOUT_USER,\n        payload: axios.get('/auth/logout')\n    }\n}","import React from 'react';\nimport '../App.css';\n\nconst Headings = (props) => {\n    if (props.addRental) {\n        return <h2>Add Rental</h2>\n    }\n    if (props.editRental) {\n        return <h2>Edit Rental</h2>\n    }\n    if (props.enterSearch) {\n        return 'Search by Zip Code'\n    }\n    if (props.signUp) {\n        return <h2>Sign Up</h2>\n    }\n\n}\n\n\nexport default Headings;","import React, { Component } from 'react'\nimport Headings from './Headings'\nimport axios from 'axios'\n\n// import { login } from '../redux/reducers/user'\n\n//connect redux\nimport { getUser } from '../redux/reducers/user'\nimport { connect } from 'react-redux'\n\n\nclass SignUp extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n\n            name: '',\n            email: '',\n            password: ''\n        }\n    }\n    handleChange = e => {\n        let { value, name } = e.target\n\n        this.setState({\n            [name]: value\n        })\n    }\n    \n    handleClick = () => {\n        let newUser = this.state\n        this.createUser(newUser)\n        this.setState({\n            name: '',\n            email: '',\n            password: ''\n           \n        })\n        this.props.handleSubmit();\n    }\n\n    handleSubmit = () => {\n        let { email, password } = this.state\n        this.login({ email, password })\n    }\n\n\n    createUser = newUser => {\n        axios.post('/auth/register', newUser)\n            .then(res => {\n                this.setState({\n                    rentals: res.data\n                })\n                alert(`Your account has been created!`)\n\n            }).catch(err => console.log(err))\n            \n    }\n\n\n    render() {\n        //de-structure user from redux props\n        let { user } = this.props\n        return (\n            <div className=\"addRentalSection\">\n\n\n                <div style={styles.addForm}>\n                    <Headings signUp={true} />\n                    <p><input\n                        style={styles.input}\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        onChange={this.handleChange}\n                        value={this.state.name} /></p>\n                    <p><span style={styles.icon} className=\"fa\">&#xf007; </span>\n                    <input\n                        style={styles.input}\n                        type=\"text\"\n                        name=\"email\"\n                        placeholder=\" E-mail\"\n                        onChange={this.handleChange}\n                        value={this.state.email} /></p>\n                    <p><span style={styles.icon} className=\"fa\">&#xf023; </span>\n                    <input\n                        style={styles.input}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"  Password\"\n                        onChange={this.handleChange}\n                        value={this.state.password} /></p>\n                    <button className=\"saveChangesButton\" onClick={this.handleClick}>Submit</button>\n                    <div>\n                        <p><button className=\"cancelbutton\" onClick={this.props.toggleSignup}>Cancel</button></p>\n                    </div>\n                    \n\n\n                </div>\n\n            </div>\n        )\n\n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\nexport default connect(mapStateToProps, { getUser })(SignUp)\n\nlet styles = {\n    addForm: {\n\n        width: 375,\n        padding: 15,\n        text: 15,\n        margin: 20,\n        fontFamily: 'Times New Roman, Times, serif',\n        boxShadow: '10px gray',\n        border: '1px black solid',\n        padding: '10px 10px 10px 50px',\n        margin: '10px',\n        // background: 'lightblue',\n        border: 'black 2px solid',\n        boxShadow: '10px 10px 5px grey'\n    },\n    input: {\n        border: 'none',\n        borderBottom: '1px solid lightgray',\n        width: 300,\n        fontSize: 15\n    },\n    icon: {\n        fontSize: '25px'\n    }\n\n\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { login } from '../redux/reducers/user'\n\nimport SignUp from './SignUp'\n\nclass LoginForm extends Component {\n    constructor(props) {\n        super(props) \n\n        \n\n        this.state = {\n            email: '',\n            password: '',\n            signup: false\n\n\n        }\n    }\n    \n\n     //function to toggle between Login and Signup\n     toggleSignup = () =>\n     this.setState({\n         signup: !this.state.signup\n     })\n\n\n    handleChange = e => {\n        let { name, value } = e.target \n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSubmit = () => {\n        let { email, password } = this.state\n        this.props.login({ email, password }) //goes to user.js in redux\n    }\n\n    render() {\n        // console.log(this.state.signup)\n        return (\n            <div className=\"login\">\n                {this.state.signup ?\n                <div>\n                    <SignUp \n                        toggleSignup={this.toggleSignup}\n                        handleSubmit ={this.handleSubmit}\n                    />\n                    \n                    \n                </div>\n                :\n                <div className=\"loginbox\">   \n                <h3>User Login</h3>\n            \n                <p><span style={styles.icon} className=\"fa\">&#xf007; </span>\n                <input\n                    style={styles.input} \n                    name=\"email\" \n                    type=\"text\" \n                    placeholder=\" E-mail\" \n                    onChange={this.handleChange}/>{' '}\n                </p>\n                <span style={styles.icon} className=\"fa\">&#xf023; </span>\n                <input \n                    style={styles.input} \n                    name=\"password\" \n                    type=\"password\" \n                    placeholder=\"  Password\" \n                    onChange={this.handleChange}/>{' '}\n                <p><button className=\"saveChangesButton\" onClick={this.handleSubmit}>login</button></p>\n                <button className=\"signupbutton\" onClick={this.toggleSignup} >Sign Up</button>\n                </div>\n                \n                }\n            </div>\n\n        )\n    }\n}\n\nexport default connect(null, { login })(LoginForm)\n\nlet styles = {\n    input: {\n        border: 'none',\n        borderBottom: '1px solid lightgray',\n        width: 300,\n        fontSize: 15\n    },\n    icon: {\n        fontSize: '25px'\n    }\n    \n}","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport LoginForm from './LoginForm'\nimport { logout } from '../redux/reducers/user'\n\n\nfunction Landing(props) {\n// console.log(\"from landing page:\", props)\n    let { user } = props\n    let name = user && user.name\n    // console.log(33333, props.user)\n    return (\n        <div>\n            <span>\n            { user ? <div className=\"mainlogout\" onClick={props.logout}>Logout {name}</div> \n             \n            \n            : \n            \n            <LoginForm />}\n            \n            </span>\n\n        </div>\n    )\n}\n\nlet mapStateToProps = state => {\n    let { data: user } = state.user \n    return { user }\n}\n\nexport default connect(mapStateToProps, {logout})(Landing)","   import React, {Component} from 'react';\n   import axios from 'axios';\n\n   //connect redux\n    import { connect } from 'react-redux'\n    import { getUser } from '../redux/reducers/user'\n\n    class EditExpense extends Component {\n       constructor(props) {\n           super(props)\n\n           let { id, name, date, amount, ischecked, notes, category, total, fulldate} = props.expense\n\n           this.state = {\n               name,\n               date,\n               amount,\n               ischecked,\n               notes,\n               category,\n               total,\n               id,\n               fulldate,\n\n               expenses: [],\n               categories: []\n           }\n       }\n\n       componentDidMount() {\n         // get logged in user info to pass as parameter to database\n         let {user} = this.props\n         let id = user && user.id\n \n         console.log(\"EnterExpenseCDM:\", id)\n        \n \n         axios.get('/api/categories', {\n             params: {\n             \n                 userid: id\n             }\n         }).then((res) => {\n             this.setState({\n                 categories: res.data\n             })\n         }).catch(err => console.log('error getting expenses:', err))\n    }\n\n       handleChange = e => {\n           let { value, name } = e.target\n\n           this.setState({\n               [name]: value\n           })\n       }\n\n       addCheck = e => this.setState({ischecked: '√'})\n\n       handleClick = () => {\n           let updatedExpense = { ...this.props.expense, ...this.state }\n           this.props.updateExpense(updatedExpense)\n           this.props.toggleEdit() // takes display back to original display\n       }\n\n       render() {\n           return(\n            <tr>\n            <td className=\"dateColumn myEditCell\">\n              <input\n                  type=\"text\"\n                  name=\"date\"\n                  \n                  placeholder=\"Date\"\n                  className=\"dateColumn listExpense\"\n                  onChange={this.handleChange}\n                //   defaultValue={`${this.state.month}/${this.state.day}`}/>\n                  value={this.state.date}/>\n              </td>\n              <td className=\"nameColumn myEditCell\">\n              <input\n                  type=\"text\"\n                  name=\"name\"\n                  className=\"nameColumn listExpense\"\n                  placeholder=\"Name\"\n                  \n                  onChange={this.handleChange}\n                  value={this.state.name} />\n              </td>\n              <td className=\"amountColumn myEditCell\">\n              <input\n                  type=\"text\"\n                  name=\"amount\"\n                  placeholder=\"Amount\"\n                  \n                  className=\"amountColumn listExpense\"\n                  onChange={this.handleChange}\n                  value={this.state.amount} />\n                  </td>\n              <td className=\"√Column myEditCell\">\n              <input\n                  type=\"text\"\n                  width=\"5px\"\n                  name=\"ischecked\"\n                  onClick={this.addCheck}\n                  className=\"listExpense\"\n                  onChange={this.handleChange}\n                  value={this.state.ischecked} />\n                  </td>\n              <td className=\"notesColumn myEditCell\">\n              <input\n                  type=\"text\"\n                  name=\"notes\"\n                  placeholder=\"Notes\"\n                  className=\"notesColumn listExpense\"\n                  \n                  onChange={this.handleChange}\n                  value={this.state.notes} />\n                  </td>\n              <td className=\"categoryColumn myEditCell\">\n              <select className=\"listExpense\"\n                                name=\"category\" onChange={this.handleChange}>\n                                selected<option>{this.state.category}</option>\n                                {this.state.categories.map((category, index) => {\n                                    return (\n                                        <option\n                                            key={category.id}\n                                            value={category.categoryname}>{category.categoryname}</option>\n                                    )\n                                })}\n                            </select>\n                  </td>\n              <td className=\"balanceColumn myEditCell\">\n                  </td>\n              <td className=\"deleteSaveColumn fa myEditCell\">\n\n              <span style={styles.icon} onClick={this.handleClick}>&#xf0c7;</span>\n              </td>\n              </tr>\n           )\n       }\n   }\n\n   let styles = {\n  \n    colOne: {\n        width: 100\n    },\n    colTwo: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colThree: {\n        width: 100,\n        textAlign: \"right\",\n        paddingLeft: \"10px\"\n    },\n    colFour: {\n        width: 200,\n        textAlign: \"left\",\n        paddingLeft: \"20px\"\n    },\n    colFive: {\n        width: 75,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colSix: {\n        width: 200\n    },\n    icon: {\n        fontSize: '25px',\n        cursor: 'pointer',\n    },\n    date: {\n        width: '50px'\n    },\n    rightJustify: {\n        textAlign: 'right',\n        width: 100\n    },\n    notes: {\n        width: '100px'\n    },\n    checkbox: {\n        width: '20px'\n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(EditExpense)","import React, {Component} from 'react'\n\nimport EditExpense from './EditExpense'\nimport '../App.css'\n\n\n\n//display number in us currency format\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n})\n\nexport default class ListExpense extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            edit: false,\n        }\n    }\n\n    //function to toggle between dipslay expenses and edit expense\n    toggleEdit = () => \n        this.setState({\n            edit: !this.state.edit\n        })\n\n\n    render() {\n        let {expense, updateExpense, beginningBalance} = this.props\n        \n        // let {user} = this.props\n        // let admin = user && user.isadmin\n        \n        return (\n            <>\n                {\n                    this.state.edit ?\n                        <>\n                            <EditExpense    \n                                expense = {expense}\n                                toggleEdit={this.toggleEdit}\n                                updateExpense={updateExpense} />\n                        </>\n\n                        :\n\n                        <>\n               <tr>\n\n                <td className=\"myTableCell dateColumn listExpense\" onClick={this.toggleEdit}>\n                    {expense.date}\n                </td>\n                <td onClick={this.toggleEdit} className={`${expense.category} listExpense myTableCell nameColumn`}>\n                    {expense.name}\n                </td>\n                <td onClick={this.toggleEdit} className={`${expense.category} listExpense myTableCell amountColumn`}>\n                    {formatter.format(expense.amount)}\n                </td>\n                <td onClick={this.toggleEdit} id=\"mycheckbox\" className={`${expense.category} listExpense myTableCell √Column`}>\n                    {expense.ischecked}\n                </td>\n                <td onClick={this.toggleEdit} className={`${expense.category} listExpense myTableCell notesColumn`}>\n                    {expense.notes}\n                </td>\n                <td onClick={this.toggleEdit} className={`${expense.category} listExpense myTableCell categoryColumn`}>\n                    {expense.category}\n                </td>\n                <td className=\"myTableCell balanceColumn listExpense\">\n                    {formatter.format(beginningBalance - expense.running_total)}\n                </td>\n                <td className=\"myTableCell deleteSaveColumn\" style={styles.colSix}>\n                <span style={styles.edit} className=\"fa\" onClick={this.props.deleteExpense}><span className=\"hoverdelete\"> &#xf014;</span></span>\n                </td>\n               </tr>\n\n               </>\n\n\n\n                }\n\n        </>\n        )\n    }\n   \n}\n\nlet styles = {\n  \n   \n    colTwo: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colThree: {\n        width: 100,\n        textAlign: \"right\",\n        paddingRight: \"10px\"\n    },\n    colFour: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"20px\"\n    },\n    colFive: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colSix: {\n        width: 100\n    },\n    icon: {\n        fontSize: '25px',\n        cursor: 'pointer',\n    },\n\n    edit: {\n        fontSize: 25,\n        cursor: 'pointer'\n    },\n    checkbox: {\n        width: 15\n    },\n    notes: {\n        width: '100px'\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\nvar today = new Date();\nvar date = (today.getMonth() + 1) + '/' + today.getDate();\n\nvar fulldate = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\nclass AddExpense extends Component {\n    constructor(props) {\n        super(props)\n\n        let { user } = this.props\n        let id = user && user.id\n        // console.log(999, id)\n\n        this.state = {\n            name: '',\n            date: date,\n            amount: '',\n            ischecked: '',\n            notes: '',\n            category: '',\n            fulldate: fulldate,\n            userid: id,\n\n            expenses: [],\n            categories: [],\n\n            add: false\n        }\n    }\n\n    componentDidMount() {\n         // get logged in user info to pass as parameter to database\n         let {user} = this.props\n         let id = user && user.id\n \n         console.log(\"EnterExpenseCDM:\", id)\n        \n \n         axios.get('/api/categories', {\n             params: {\n             \n                 userid: id\n             }\n         }).then((res) => {\n             this.setState({\n                 categories: res.data\n             })\n         }).catch(err => console.log('error getting expenses:', err))\n    }\n\n    handleChange = e => {\n        // console.log(1111, this.state.ischecked)\n        let { value, name } = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleClick = () => {\n\n        let { user } = this.props\n        let id = user && user.id\n\n        console.log(\"handleclick:\", id)\n\n        let newExpense = this.state\n        this.props.createExpense(newExpense)\n        this.setState({\n            name: '',\n            date: date,\n            amount: '',\n            ischecked: '',\n            notes: '',\n            category: '',\n            class: '',\n            fulldate: fulldate,\n            userid: id,\n\n            add: false\n        })\n    }\n\n    toggleAdd = () =>\n        this.setState({\n            add: !this.state.add\n        })\n\n    toggleChange = () => {\n        this.setState({\n            ischecked: !this.state.ischecked // flip boolean value\n        })\n    }\n\n    render() {\n\n        return (\n            <>\n\n                <tr>\n                    <td className=\"dateColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"dateColumn listExpense\"\n                            name=\"date\"\n                            placeholder=\"Date\"\n                            onChange={this.handleChange}\n                            value={this.state.date} />\n                    </td>\n                    <td className=\"nameColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            name=\"name\"\n                            placeholder=\" Enter Name\"\n                            onChange={this.handleChange}\n                            value={this.state.name} />\n                    </td>\n                    <td className=\"amountColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            name=\"amount\"\n                            style={styles.notes}\n                            placeholder=\"Enter Amt\"\n                            onChange={this.handleChange}\n                            value={this.state.amount} />\n                    </td>\n                    <td className=\"√Column myAddCell\">\n                    </td>\n                    <td className=\"notesColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            style={styles.notes}\n                            name=\"notes\"\n                            placeholder=\"Enter Note\"\n                            onChange={this.handleChange}\n                            value={this.state.notes}\n                        />\n                    </td>\n\n                    <td className=\"categoryColumn myAddCell\">\n                    <select className=\"listExpense\"\n                                name=\"category\" onChange={this.handleChange}>\n                                    value={this.state.category}\n                                Selected<option>Choose Category</option>\n                                {this.state.categories.map((category) => {\n                                    return (\n                                        <option\n                                            key={category.id}\n                                            value={category.categoryname}>{category.categoryname}</option>\n                                    )\n                                })}\n                            </select>\n                    </td>\n                    <td className=\"balanceColumn myAddCell\">\n                        <button style={styles.saveButton}  onClick={this.handleClick}>Save</button>\n                    </td>\n                    <td className=\"deleteSaveColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            style={styles.notes}\n                            name=\"fulldate\"\n                            placeholder=\"Full Date\"\n                            onChange={this.handleChange}\n                            value={this.state.fulldate}\n                        />\n                    </td>\n                </tr>\n\n            </>\n        )\n\n    }\n}\n\nlet styles = {\n\n    colOne: {\n        width: 100\n    },\n    colTwo: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colThree: {\n        width: 75,\n        textAlign: \"right\",\n        paddingLeft: \"10px\"\n    },\n    colFour: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"20px\"\n    },\n    colFive: {\n        width: 75,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colSix: {\n        width: 200\n    },\n    icon: {\n        fontSize: '25px',\n        cursor: 'pointer',\n    },\n    date: {\n        width: '50px'\n    },\n    checkbox: {\n        width: '10px'\n    },\n    notes: {\n        width: '100px'\n    },\n    select: {\n        fontFamily: 'Times New Roman',\n        fontSize: '16px',\n        fontWeight: 'bold'\n    },\n    saveButton: {\n        backgroundColor: 'green',\n        color: 'white',\n        fontSize: '15px'\n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(AddExpense)","import React, {Component} from 'react'\nimport axios from 'axios';\n\nimport '../App.css'\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\n\n// import './App.css'\n\n//display number in us currency format\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n})\n\nvar today = new Date();\n//var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\nvar year = today.getFullYear();\nvar month = today.getMonth() + 1\n\nclass ShowMonthTotals extends Component{\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            totals: []\n        }  \n    }\n\n    componentDidMount() {\n\n        let { user } = this.props\n        let userid = user && user.id\n\n       \n        axios.get('/api/totals', {\n            params: {\n\n                month: month,\n                year: year,\n                userid: userid\n            }\n        }).then((res) => {\n            this.setState({\n                totals: res.data\n            })\n        }).catch(err => console.log('error getting expenses:', err))\n\n          //keep user logged in after refresh\n          this.props.getUser()\n\n\n    }\n\n\n    render() {\n    \n        return(\n            <div className=\"totalsWrapper\">\n                <table className=\"narrowTable\">\n                    <tbody>\n\n                <tr>\n                    <td className=\"totalsCategory myHeaderCell\">\n                        Category\n                    </td>\n                    <td className=\"totalsCell myHeaderCell\">\n                        Total\n                    </td>\n                </tr>\n            {this.state.totals.map((totals, index) => {\n                return(\n                    <tr key={index}>\n                    <td className=\"totalsCategory\">\n                        {totals.category}\n                    </td>\n                    <td className=\"totalsSum\"> \n                    {formatter.format(totals.sum)}\n                    </td>\n                </tr>\n\n                )\n                \n            })}\n            </tbody>\n           </table>\n            <p><button className='magicbutton' onClick={this.props.toggleDisplay}><a>Hide Totals</a></button></p>\n            </div>\n        )\n    }\n}\n\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(ShowMonthTotals)","import React, {Component} from 'react';\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\n\nclass AddMonth extends Component {\n    constructor(props){\n        super(props)\n\n\n        // get logged in user info to pass as parameter to database\n        let {user} = this.props\n        let userid = user && user.id\n\n        this.state = {\n            monthname: '',\n            monthnumber: '',\n            years: '',\n            beginningbalance: '',\n            userid: userid\n        }\n    }\n\n    handleChange = e => {\n        let {value, name} = e.target\n        //console.log(2222, name, value)\n        if(name === 'monthname'){\n            const months = {\n                'January' : '01',\n                'February' : '02',\n                'March' : '03',\n                'April' : '04',\n                'May' : '05',\n                'June' : '06',\n                'July' : '07',\n                'August' : '08',\n                'September' : '09',\n                'October' : '10',\n                'November' : '11',\n                'December' : '12'\n            }\n            //console.log(11111, months[value])\n            this.setState({\n                monthnumber: months[value]\n            })\n        }\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleClick = () => {\n        let newMonth = this.state\n        //console.log(333, newMonth)\n        this.props.createMonth(newMonth)\n        this.setState({\n            monthname: '',\n            monthnumber: '',\n            years: '',\n            beginningbalance: '',\n            create: false\n        })\n    }\n\n\n    render() {\n        return(\n            <div className=\"createnewmonthbox\">\n                <p><select name=\"monthname\" onChange={this.handleChange}>\n                    <option value=\"\">Choose Month</option>\n                    <option value=\"January\">January</option>\n                    <option value=\"February\">February</option>\n                    <option value=\"March\">March</option>\n                    <option value=\"April\">April</option>\n                    <option value=\"May\">May</option>\n                    <option value=\"June\">June</option>\n                    <option value=\"July\">July</option>\n                    <option value=\"August\">August</option>\n                    <option value=\"September\">September</option>\n                    <option value=\"October\">October</option>\n                    <option value=\"November\">November</option>\n                    <option value=\"December\">December</option>\n                </select>\n                </p>\n                \n                <p><select name=\"years\" onChange={this.handleChange}>\n                    <option value=\"\">Choose Year</option>\n                    <option value=\"2020\">2020</option>\n                    <option value=\"2021\">2021</option>\n                    <option value=\"2022\">2022</option>\n                    <option value=\"2023\">2023</option>\n                    <option value=\"2024\">2024</option>\n                </select>\n                </p>\n                <p>\n                    <input \n                    type=\"number\" \n                    name=\"beginningbalance\" \n                    onChange={this.handleChange} \n                    value={this.state.beginningbalance}\n                    placeholder=\"Enter Beginning Balance\" />\n                </p>\n                \n\n                {   // only show add month button if user has selected a month and a year\n                    this.state.monthname && this.state.years ?\n\n                    // when user has selected month and year, display them on the add and cancel buttons\n                    <button className=\"createmonthbtn\" onClick={this.handleClick}>Create {this.state.monthname && this.state.years ? \n                    this.state.monthname + ' ' + this.state.years \n                    : \n                    ''}</button>\n\n                    :\n                    ''\n                }\n                \n                <button className=\"cancelmonthbtn\" onClick={this.props.toggleCreate}>Cancel {this.state.monthname && this.state.years ? \n                this.state.monthname + ' ' + this.state.years \n                : \n                ''}</button>\n                \n                \n\n            </div>\n        )\n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(AddMonth)","import React, { Component } from 'react'\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport LandingPage from './LandingPage'\n\n// import {Link} from 'react-router-dom';\n\nimport ListExpenses from './ListExpenses'\nimport AddExpense from './AddExpense'\nimport ShowMonthTotals from './ShowMonthTotals'\nimport AddMonth from './AddMonth';\n// import Header from './Header';\n// import FixedExpenses from './FixedExpenses'\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\n\n\nvar today = new Date();\n//var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\nvar year = today.getFullYear();\nvar month = today.getMonth() + 1\n\n//display number in us currency format\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n})\n\nclass EnterExpense extends Component {\n    constructor(props) {\n        super(props)\n\n        // console.log(\"after super:\", this.props.user)\n\n        this.state = {\n            expenses: [],\n            categories: [],\n            monthlist: [],\n            month: '',\n            year: '',\n            beginningbalance:'',\n            display: false,\n            create: false,\n            fixedexpenses: false\n        }\n    }\n\n    //function to toggle between display expense and edit expense\n    toggleEdit = () =>\n        this.setState({\n            edit: !this.state.edit\n        })\n\n    toggleDisplay = () =>\n        this.setState({\n            display: !this.state.display\n        })\n\n    toggleCreate = () => {\n        this.setState({\n            create: !this.state.create\n        })\n        }\n\n    componentDidMount() {\n\n        // get logged in user info to pass as parameter to database\n        let {user} = this.props\n        let userid = user && user.id\n\n        console.log(\"EnterExpenseCDM:\", userid)\n       \n\n        axios.get('/api/expenses', {\n            params: {\n                \n                month: month,\n                year: year,\n                userid: userid\n            }\n        }).then((res) => {\n            this.setState({\n                expenses: res.data\n            })\n        }).catch(err => console.log('error getting expenses:', err))\n\n        axios.get('/api/monthlist', {\n            params: {\n\n                userid: userid\n            }\n        }).then((res) => {\n            //console.log(\"resdataformonthlistis \", res.data)\n            this.setState({\n                monthlist: res.data\n            })\n        }).catch(err => console.log('error getting month list:', err))\n\n        axios.get('/api/beginningbalance', {\n            params: {\n\n                month: month,\n                year: year,\n                userid: userid\n            }\n        }).then((res) => {\n            const {beginningbalance} = res.data[0]\n            this.setState({\n                beginningbalance: beginningbalance\n            })\n        }).catch(err => console.log('error getting beginning balance:', err))\n\n        //keep user logged in after refresh\n         this.props.getUser()\n\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        const { month, year} = this.state;\n        \n        // get logged in user info to pass as parameter to database\n        let { user } = this.props\n        let id = user && user.id\n\n        // console.log(\"componentDidUpdate:\", id)\n       \n\n        if(month !== prevState.month || year !== prevState.year){\n            axios.get('/api/expenses', {\n                params: {\n                    \n                    month: month,\n                    year: year,\n                    userid: id\n                }\n            }).then((res) => {\n                this.setState({\n                    expenses: res.data\n                })\n            }).catch(err => console.log('error getting expenses:', err))\n        }\n  \n    }\n\n    handleChange = e => {\n        \n        let { value, name } = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    setMonth = (month, year, beginningbalance) => {\n        this.setState({\n            month: month,\n            year: year,\n            beginningbalance: beginningbalance\n\n        })\n    }\n    \n\n    createExpense = newExpense => {\n        axios.post('/api/expenses', newExpense)\n            .then(res => {\n                this.setState({\n                    expenses: res.data\n                })\n            }).catch(err => console.log(err))\n    }\n\n    createMonth = newMonth => {\n        axios.post('/api/monthlist', newMonth)\n            .then(res => {\n                this.setState({\n                    monthlist: res.data,\n                    create: false\n                })\n            }).catch(err => console.log(err))\n    }\n\n    deleteExpense = id => {\n        // from sweet alert\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once deleted, you will not be able to recover this expense!\",\n            icon: \"warning\",\n            buttons: {\n                cancel: \"No, Don't Delete!\",\n                dangerMode: \"Yes, Delete It!\",\n            },\n            \n          })\n          .then((willDelete) => {\n            if (willDelete) {\n\n                let { user } = this.props\n                let userid = user && user.id\n\n                //console.log(2222, id)\n            axios.delete(`/api/expenses/${id}&${userid}`)\n            .then(res => this.setState({ expenses: res.data }))\n            .catch(err => console.log(err))\n              swal(\"Poof! Your expense has been deleted!\", {\n                icon: \"success\",\n              });\n            } else {\n              swal(\"Your expense is safe!\");\n            }\n          });\n    }\n    \n    handleClear = () => {\n        this.setState({\n            name: '',\n            date: '',\n            amount: '',\n            ischecked: '',\n            notes: '',\n            category: '',\n            class: ''\n        })\n\n    }\n\n    updateExpense = expense => {\n        axios.put(`/api/expenses/${expense.id}`, expense)\n            .then(res => this.setState({ expenses: res.data }))\n            .catch(err => console.log(err))\n            // alert(\"Changes Saved\")\n    }\n\n    render() {\n        let beginningbalance = this.state.beginningbalance\n        let { user } = this.props\n        //let id = user && user.id\n        // console.log(\"render:\", id)\n        \n        // console.log(\"this is the userid:\", id)\n        \n        console.log(\"beginning balance = \", beginningbalance)\n\n        return (\n            \n            <div className=\"wrapper\">\n                \n\n            <div className=\"fixtop\">\n            <>    \n        {user? // Only show months, totals, create month, and expenses if user is logged in\n            <span>\n            <h3>\n                    {/* <p>{year} Budget</p> */}\n                {/* <p><Link className=\"btn fixedexpenses\" to={'/FixedExpenses'}>Fixed Expenses</Link></p> */}\n                {this.state.monthlist.map((monthlist, index) => {\n                    return (\n                        <span className=\"magicbutton\" key={index} \n                        onClick={e => this.setMonth(monthlist.monthnumber, monthlist.years, monthlist.beginningbalance)}>\n                            <a>{`${monthlist.monthname} ${monthlist.years}`}  |   </a></span>\n                        \n                    )\n                })}</h3>\n                \n                {\n                    this.state.create ?\n                     <div>\n                         <AddMonth\n                            createMonth={this.createMonth}\n                            toggleCreate={this.toggleCreate}/>\n                    </div>\n                    :\n                    <span className=\"magicbutton\">\n                    <span onClick={this.toggleCreate}><a>Add Month |  </a></span>\n                    </span>\n                }\n\n\n                {\n                    this.state.display ?\n                        <div className=\"monthtotals\">\n                            <ShowMonthTotals\n                              toggleDisplay={this.toggleDisplay}/>\n                        </div>\n                        :\n                        <span className=\"magicbutton\">  \n                        <span onClick={this.toggleDisplay}><a>Show Totals</a></span>\n                        </span>\n\n                }\n                <div><p></p></div>\n                 <div id=\"listExpense\">Beginning Balance = {formatter.format(beginningbalance)}</div>\n                 <div> \n                 </div>\n\n           \n                 <table>\n                 <tbody>\n                 <tr>\n                                <td className=\"dateColumn myHeaderCell\"><h3>Date</h3></td>\n                                <td className=\"nameColumn myHeaderCell\"><h3>Name</h3></td>\n                                <td className=\"amountColumn myHeaderCell\"><h3>Amount</h3></td>\n                                <td className=\"√Column myHeaderCell\"><h3>√</h3></td>\n                                <td className=\"notesColumn myHeaderCell\"><h3>Notes</h3></td>\n                                <td className=\"categoryColumn myHeaderCell\"><h3>Category</h3></td>\n                                <td className=\"balanceColum myHeaderCell\"><h3>Balance</h3></td>\n                                <td className=\"deleteSaveColumn myHeaderCell\"><h3>Del/Save</h3></td>\n                </tr>\n               \n               \n                \n                    \n                {this.state.expenses.map((expense, index) => {\n                    return (\n                        <ListExpenses\n                            key={index}\n                            expense={expense}\n                            updateExpense={this.updateExpense}\n                            deleteExpense={() => this.deleteExpense(expense.id)}\n                            beginningBalance={this.state.beginningbalance} />\n\n                    )\n                })}\n                <AddExpense createExpense={this.createExpense} />\n                </tbody>\n                </table>\n            </span>\n            :\n            <span>\n                <LandingPage />\n            </span>\n            }\n            </>\n\n            </div>\n        \n                \n\n            </div>\n        )\n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(EnterExpense)","import React, {Component} from 'react';\nimport axios from 'axios';\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\n//    //display number in us currency format\n// const formatter = new Intl.NumberFormat('en-US', {\n//     style: 'currency',\n//     currency: 'USD',\n//     minimumFractionDigits: 2\n//     })\n\n\nclass EditFixedExpense extends Component {\n    constructor(props) {\n        super(props)\n\n        let { id, name, amount, notes, category} = props.fixedexpense\n\n        this.state = {\n            name,\n            amount,\n            notes,\n            category,\n            id,\n            fixedexpenses: [],\n            categories: []\n        }\n    }\n\n    componentDidMount() {\n     // get logged in user info to pass as parameter to database\n     let {user} = this.props\n     let id = user && user.id\n\n     console.log(\"EnterExpenseCDM:\", id)\n    \n\n     axios.get('/api/categories', {\n         params: {\n         \n             userid: id\n         }\n     }).then((res) => {\n         this.setState({\n             categories: res.data\n         })\n     }).catch(err => console.log('error getting expenses:', err))\n\n }\n\n    handleChange = e => {\n        let { value, name } = e.target\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n\n    handleClick = () => {\n        let updatedFixedExpense = { ...this.props.fixedexpense, ...this.state }\n        this.props.updateFixedExpense(updatedFixedExpense)\n        this.props.toggleEdit() // takes display back to original display\n    }\n\n    render() {\n        return(\n         <tr>\n           <td className=\"nameColumn myEditCell\">\n           <input\n               type=\"text\"\n               name=\"name\"\n               placeholder=\"Name\"\n               \n               className=\"listExpense nameColumn\"\n               onChange={this.handleChange}\n               value={this.state.name} />\n           </td>\n           <td className=\"amountColumn myEditCell\">\n           <input\n               type=\"text\"\n               name=\"amount\"\n               className=\"listExpense amountColumn\"\n               placeholder=\"Amount\"\n               \n               onChange={this.handleChange}\n               value={this.state.amount} />\n               </td>\n            <td className=\"notesColumn myEditCell\">\n           <input\n               type=\"text\"\n               name=\"notes\"\n               placeholder=\"Notes\"\n               className=\"listExpense notesColumn\"\n               \n               onChange={this.handleChange}\n               value={this.state.notes} />\n            </td>\n           <td className=\"categoryColumn myEditCell\">\n           <select className=\"listExpense categoryColumn\"\n                             name=\"category\" onChange={this.handleChange}>\n                             selected<option>{this.state.category}</option>\n                             {this.state.categories.map((category, index) => {\n                                 return (\n                                     <option\n                                         key={index}\n                                         value={category.categoryname}>{category.categoryname}</option>\n                                 )\n                             })}\n                         </select>\n               </td>\n           <td className=\"deleteSaveColumn myEditCell\">\n           <span style={styles.icon} className=\"fa\" onClick={this.handleClick}>&#xf0c7;</span>\n           </td>\n           </tr>\n        )\n    }\n}\n\nlet styles = {\n\n colOne: {\n     width: 100\n },\n colTwo: {\n     width: 100,\n     textAlign: \"left\",\n     paddingLeft: \"10px\"\n },\n colThree: {\n     width: 100,\n     textAlign: \"right\",\n     paddingLeft: \"10px\"\n },\n colFour: {\n     width: 200,\n     textAlign: \"left\",\n     paddingLeft: \"20px\"\n },\n colFive: {\n     width: 75,\n     textAlign: \"left\",\n     paddingLeft: \"10px\"\n },\n colSix: {\n     width: 200\n },\n icon: {\n     fontSize: '25px',\n     cursor: 'pointer',\n },\n date: {\n     width: '50px'\n },\n rightJustify: {\n     textAlign: 'right',\n     width: 100\n },\n notes: {\n     width: '100px'\n },\n checkbox: {\n     width: '10px'\n }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(EditFixedExpense)","import React, {Component} from 'react'\n\nimport EditFixedExpense from './EditFixedExpense'\nimport '../App.css'\n\n\n\n//display number in us currency format\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n})\n\nexport default class ListFixedExpenses extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            edit: false\n        }\n    }\n\n    //function to toggle between display fixedexpenses and edit fixedexpense\n    toggleEdit = () => \n        this.setState({\n            edit: !this.state.edit\n        })\n\n\n    render() {\n        let {fixedexpense, updateFixedExpense} = this.props\n        \n        // let {user} = this.props\n        // let admin = user && user.isadmin\n        \n        return (\n            <>\n\n                {\n                    this.state.edit ?\n                        <>\n                            <EditFixedExpense   \n                                fixedexpense = {fixedexpense}\n                                toggleEdit={this.toggleEdit}\n                                updateFixedExpense={updateFixedExpense} />\n                        </>\n\n                        :\n\n                        <>\n               <tr>\n\n                <td onClick={this.toggleEdit} className={`${fixedexpense.category} listExpense myTableCell nameColumn`}>\n                    {fixedexpense.name}\n                </td>\n                <td onClick={this.toggleEdit}  className={`${fixedexpense.category} listExpense myTableCell amountColumn`}>\n                    {formatter.format(fixedexpense.amount)}\n                </td>\n                \n                <td onClick={this.toggleEdit} style={styles.notes} className={`${fixedexpense.category} listExpense myTableCell`}>\n                    {fixedexpense.notes}\n                </td>\n                <td onClick={this.toggleEdit} style={styles.colFour} className={`${fixedexpense.category} listExpense myTableCell categoryColumn`}>\n                    {fixedexpense.category}\n                </td>\n                \n                <td className=\"myTableCell deleteEditColumn\">\n                <span style={styles.edit} className=\"fa\" onClick={this.props.deleteFixedExpense}><span className=\"hoverdelete\"> &#xf014;</span></span>\n                </td>\n               </tr>\n\n               </>\n\n\n                }\n\n        </>\n        )\n    }\n   \n}\n\nlet styles = {\n  \n    colOne: {\n        width: 100\n    },\n    colTwo: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colThree: {\n        width: 100,\n        textAlign: \"right\",\n        paddingLeft: \"10px\"\n    },\n    colFour: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"20px\"\n    },\n    colFive: {\n        width: 75,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colSix: {\n        width: 150\n    },\n    icon: {\n        fontSize: '25px',\n        cursor: 'pointer',\n    },\n\n    edit: {\n        fontSize: 25,\n        cursor: 'pointer'\n    },\n    checkbox: {\n        width: '10px'\n    },\n    notes: {\n        width: '100px'\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\n// var today = new Date();\n// var date = (today.getMonth() + 1) + '/' + today.getDate();\n\n// var fulldate = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\n// //display number in us currency format\n// const formatter = new Intl.NumberFormat('en-US', {\n//     style: 'currency',\n//     currency: 'USD',\n//     minimumFractionDigits: 2\n// })\n\nclass AddFixedExpense extends Component {\n    constructor(props) {\n        super(props)\n\n        // get logged in user info to pass as parameter to database\n        let {user} = this.props\n        let id = user && user.id\n\n        this.state = {\n            name: '',\n            amount: '',\n            notes: '',\n            category: '',\n            userid: id,\n\n            fixedexpenses: [],\n            categories: [],\n\n            add: false\n        }\n    }\n\n    componentDidMount() {\n         // get logged in user info to pass as parameter to database\n         let {user} = this.props\n         let id = user && user.id\n \n        \n        axios.get('/api/categories', {\n            params: {\n            \n                userid: id\n            }\n        }).then((res) => {\n            this.setState({\n                categories: res.data\n            })\n        }).catch(err => console.log('error getting expenses:', err))\n\n    }\n\n    handleChange = e => {\n        let { value, name } = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleClick = () => {\n        let newFixedExpense = this.state\n        this.props.createFixedExpense(newFixedExpense)\n\n         // get logged in user info to pass as parameter to database\n         let {user} = this.props\n         let id = user && user.id\n\n        this.setState({\n            name: '',\n            amount: '',\n            notes: '',\n            category: '',\n            userid: id,\n\n            add: false\n        })\n    }\n\n    toggleAdd = () =>\n        this.setState({\n            add: !this.state.add\n        })\n\n    // toggleChange = () => {\n    //     this.setState({\n    //         ischecked: !this.state.ischecked // flip boolean value\n    //     })\n    // }\n\n    render() {\n        return (\n            <>\n\n                <tr>\n                    <td className=\"nameColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense myTableCell\"\n                            name=\"name\"\n                            placeholder=\"Name\"\n                            onChange={this.handleChange}\n                            value={this.state.name} />\n                    </td>\n                    <td className=\"amountColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            name=\"amount\"\n                            style={styles.notes}\n                            placeholder=\"Amount\"\n                            onChange={this.handleChange}\n                            value={this.state.amount} />\n                    </td>\n                    <td className=\"notesColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            style={styles.notes}\n                            name=\"notes\"\n                            placeholder=\"Notes\"\n                            onChange={this.handleChange}\n                            value={this.state.notes}\n                        />\n                    </td>\n\n                    <td className=\"categoryColumn myAddCell\">\n                    <select className=\"listExpense\"\n                                name=\"category\" onChange={this.handleChange}>\n                                    value={this.state.category}\n                                Selected<option>Choose Category</option>\n                                {this.state.categories.map((category) => {\n                                    return (\n                                        <option\n                                            key={category.id}\n                                            value={category.categoryname}>{category.categoryname}</option>\n                                    )\n                                })}\n                            </select>\n                    </td>\n                    <td className=\"deleteSaveColumn myAddCell\">\n                        <button style={styles.saveButton}  onClick={this.handleClick}>Save</button>\n                    </td>\n                </tr>\n            </>\n        )\n\n    }\n}\n\nlet styles = {\n\n    colOne: {\n        width: 100\n    },\n    colTwo: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colThree: {\n        width: 75,\n        textAlign: \"right\",\n        paddingLeft: \"10px\"\n    },\n    colFour: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"20px\"\n    },\n    colFive: {\n        width: 75,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colSix: {\n        width: 200\n    },\n    icon: {\n        fontSize: '25px',\n        cursor: 'pointer',\n    },\n    date: {\n        width: '50px'\n    },\n    checkbox: {\n        width: '10px'\n    },\n    notes: {\n        width: '100px'\n    },\n    select: {\n        fontFamily: 'Times New Roman',\n        fontSize: '16px',\n        fontWeight: 'bold'\n    },\n    saveButton: {\n        backgroundColor: 'green',\n        color: 'white',\n        fontSize: '15px'\n    }\n}\n\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(AddFixedExpense)","import React, { Component } from 'react'\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport LandingPage from './LandingPage'\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\nimport ListFixedExpenses from './ListFixedExpenses'\nimport AddFixedExpense from './AddFixedExpense'\n\n// var today = new Date();\n// //var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n// var year = today.getFullYear();\n// var month = today.getMonth() + 1\n\n//display number in us currency format\n// const formatter = new Intl.NumberFormat('en-US', {\n//     style: 'currency',\n//     currency: 'USD',\n//     minimumFractionDigits: 2\n// })\n\nclass FixedExpenses extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            fixedexpenses: [],\n            categories: [],\n            // monthlist: [],\n            // month: '',\n            // year: ''\n        }\n    }\n\n    //function to toggle between display expense and edit expense\n    toggleEdit = () =>\n        this.setState({\n            edit: !this.state.edit\n        })\n\n    componentDidMount() {\n\n        let { user } = this.props\n        let userid = user && user.id\n\n        console.log(\"FixedExpensesCDM:\", userid)\n       \n        axios.get('/api/fixedexpenses', {\n            params: {\n            \n                userid: userid\n            }\n        }).then((res) => {\n            this.setState({\n                fixedexpenses: res.data\n            })\n        }).catch(err => console.log('error getting expenses:', err))\n\n          //keep user logged in after refresh\n          this.props.getUser()\n\n    }\n\n    componentDidUpdate(prevProps: any, prevState: any) {\n        const { month, year} = this.state;\n        if(month !== prevState.month || year !== prevState.year){\n            axios.get('/api/expenses').then((res) => {\n                this.setState({\n                    fixedexpenses: res.data\n                })\n            }).catch(err => console.log('error getting expenses:', err))\n        }\n  \n    }\n\n    handleChange = e => {\n        \n        let { value, name } = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    // setMonth = (month, year) => {\n    //     this.setState({\n    //         month: month,\n    //         year: year\n    //     })\n    // }\n    \n\n    createFixedExpense = newFixedExpense => {\n        axios.post('/api/fixedexpenses', newFixedExpense)\n            .then(res => {\n                this.setState({\n                    fixedexpenses: res.data\n                })\n            }).catch(err => console.log(err))\n            this.forceUpdate()\n    }\n\n    deleteFixedExpense = id => {\n        // from sweet alert\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once deleted, you will not be able to recover this fixed expense!\",\n            icon: \"warning\",\n            buttons: {\n                cancel: \"No, Don't Delete!\",\n                dangerMode: \"Yes, Delete It!\",\n            },\n            \n          })\n          .then((willDelete) => {\n            if (willDelete) {\n\n                let { user } = this.props\n                let userid = user && user.id\n\n\n            // console.log(1111, id)\n            axios.delete(`/api/fixedexpenses/${id}&${userid}`)\n            .then(res => this.setState({ fixedexpenses: res.data }))\n            .catch(err => console.log(err))\n              swal(\"Poof! Your fixed expense has been deleted!\", {\n                icon: \"success\",\n              });\n            } else {\n              swal(\"Your fixed expense is safe!\");\n            }\n          });\n    }\n    \n    handleClear = () => {\n        this.setState({\n            name: '',\n            date: '',\n            amount: '',\n            ischecked: '',\n            notes: '',\n            category: '',\n            class: ''\n        })\n\n    }\n\n    updateFixedExpense = fixedexpense => {\n        // console.log(22222, fixedexpense)\n        axios.put(`/api/fixedexpenses/${fixedexpense.id}`, fixedexpense)\n            .then(res => this.setState({ fixedexpenses: res.data }))\n            .catch(err => console.log(err))\n            // alert(\"Changes Saved\")\n    }\n\n    render() {\n        // let beginningBalance = 8000\n        \n        let { user } = this.props\n\n        return (\n            <div className=\"wrapper\">\n        <>    \n        {user? // Only show months, totals, create month, and expenses if user is logged in\n            <span>\n                <h1 className=\"listExpense\"><p>Monthly Fixed Expenses</p>\n                {/* <p><Link className=\"btn fixedexpenses\" to={'/'}>Home</Link></p> */}\n              \n                </h1>\n                \n                <table>\n                    <tbody>\n                    <tr>  \n                                <td className=\"nameColumn myHeaderCell\"><h3>Name</h3></td>\n                                <td className=\"amountColumn myHeaderCell\"><h3>Amount</h3></td>\n                                <td className=\"notesColumn myHeaderCell\"><h3>Notes</h3></td>\n                                <td className=\"categoryColumn myHeaderCell\"><h3>Category</h3></td>\n                                <td className=\"deleteSaveColumn myHeaderCell\"><h3>Del/Save</h3></td>\n                </tr>\n                {this.state.fixedexpenses.map((fixedexpense, index) => {\n                    return (\n                        <ListFixedExpenses\n                            key={index}\n                            fixedexpense={fixedexpense}\n                            updateFixedExpense={this.updateFixedExpense}\n                            deleteFixedExpense={() => this.deleteFixedExpense(fixedexpense.id)}\n                            />\n\n                    )\n                })}\n                <AddFixedExpense \n                createFixedExpense={this.createFixedExpense} />\n                </tbody>\n                </table>\n                </span>\n            :\n            <span>\n                <LandingPage />\n            </span>\n            }\n            </> \n\n            </div>\n        )\n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(FixedExpenses)","import React, {Component} from 'react';\n\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\n\nclass AddCategory extends Component {\n    constructor(props) {\n        super(props)\n\n        let { user } = this.props\n        let id = user && user.id\n\n        this.state = {\n            categoryname: '',\n            userid: id\n        }\n    }\n\n    handleChange = e => {\n        let { value, name } = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleClick = () => {\n      \n\n        let newCategory = this.state\n        this.props.createCategory(newCategory)\n        this.setState({\n            categoryname: ''\n        })\n    }\n\n    render() {\n\n       \n\n        return (\n            <tr>\n                <td className=\"nameColumn listExpense myAddCell\">\n                    <input\n                        type=\"text\"\n                        className=\"listExpense\"\n                        name=\"categoryname\"\n                        placeholder=\"New Category\"\n                        onChange={this.handleChange}\n                        value={this.state.categoryname} />\n                </td>\n                <td className=\"listExpense myAddCell deleteSaveColumn\">\n                    <button onClick={this.handleClick}>Save</button>\n                </td>\n            </tr>\n        )\n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(AddCategory)","import React, {Component} from 'react'\nimport axios from 'axios';\nimport AddCategory from './AddCategory'\nimport LandingPage from './LandingPage'\n\nimport swal from 'sweetalert';\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\n\nclass EditCategories extends Component {\n    constructor(props){\n        super(props)\n\n        let { user } = this.props\n        let userid = user && user.id\n\n        this.state = {\n           categories: [],\n           userid: userid\n        }\n    }\n\n    componentDidMount = () => {\n\n        // get logged in user info to pass as parameter to database\n        let {user} = this.props\n        let id = user && user.id\n\n        console.log(\"EnterExpenseCDM:\", id)\n       \n\n        axios.get('/api/categories', {\n            params: {\n            \n                userid: id\n            }\n        }).then((res) => {\n            this.setState({\n                categories: res.data\n            })\n        }).catch(err => console.log('error getting expenses:', err))\n\n          //keep user logged in after refresh\n          this.props.getUser()\n    }\n\n    createCategory = newCategory => {\n        axios.post('/api/categories', newCategory)\n            .then(res => {\n                this.setState({\n                    categories: res.data\n                })\n            }).catch(err => console.log(err))\n    }\n\n    deleteCategory = id => {\n    \n        // from sweet alert\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once deleted, you will not be able to recover this category!\",\n            icon: \"warning\",\n            buttons: {\n                cancel: \"No, Don't Delete!\",\n                dangerMode: \"Yes, Delete It!\",\n            },\n            \n          })\n          .then((willDelete) => {\n            if (willDelete) {\n\n                let { user } = this.props\n                let userid = user && user.id\n\n                console.log(2222, id, userid)\n            axios.delete(`/api/categories/${id}&${userid}`)\n            .then(res => this.setState({ categories: res.data }))\n            .catch(err => console.log(err))\n              swal(\"Poof! Your category has been deleted!\", {\n                icon: \"success\",\n              });\n            } else {\n              swal(\"Your category is safe!\");\n            }\n          }); \n\n\n    }\n    \n    render() {\n        let { user } = this.props\n        let userid = user && user.id\n        return(\n            <div>\n                 <>    \n        {user? // Only show months, totals, create month, and expenses if user is logged in\n            <span>\n                <table className=\"narrowTable\">\n                <tbody>\n                    <tr>\n                    <td className=\"nameColumn myHeaderCell\"><h3>Category Name</h3></td>\n                    <td className=\"deleteSaveColumn myHeaderCell\"><h3>Delete</h3></td>\n\n                    </tr>\n                {this.state.categories.map((category, index) => {\n                    return (\n                        <tr key={index}>\n                            <td className=\"myTableCell listExpense nameColumn\">{category.categoryname}</td>\n                            <td className=\"myTableCell listExpense\"><button \n                            key={index}\n                            className=\"fa hoverdelete sudobtn\"\n                            onClick={(e) => this.deleteCategory(e.target.value)} \n                            value={category.id}>&#xf014;</button></td>\n                        </tr>\n                            )\n                })}\n                <AddCategory \n                    createCategory={this.createCategory} />\n                </tbody>\n                </table>\n                 </span>\n                 :\n                 <span>\n                     <LandingPage />\n                 </span>\n                 }\n                 </> \n            </div>\n           \n        )\n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(EditCategories)","import React, {Component} from 'react'\n\nimport EditExpense from './EditExpense'\nimport '../App.css'\n\n\n\n//display number in us currency format\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n})\n\nexport default class ListExpense extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            edit: false,\n        }\n    }\n\n    //function to toggle between dipslay expenses and edit expense\n    toggleEdit = () => \n        this.setState({\n            edit: !this.state.edit\n        })\n\n\n    render() {\n        let {expense, updateExpense, beginningBalance} = this.props\n        \n        // let {user} = this.props\n        // let admin = user && user.isadmin\n        \n        return (\n            <>\n                {\n                    this.state.edit ?\n                        <>\n                            <EditExpense    \n                                expense = {expense}\n                                toggleEdit={this.toggleEdit}\n                                updateExpense={updateExpense} />\n                        </>\n\n                        :\n\n                        <>\n               <tr>\n\n                <td className=\"myTableCell dateColumn listExpense\" onClick={this.toggleEdit}>\n                    {expense.date}\n                </td>\n                <td onClick={this.toggleEdit} className={`${expense.category} listExpense myTableCell nameColumn`}>\n                    {expense.name}\n                </td>\n                <td onClick={this.toggleEdit} className={`${expense.category} listExpense myTableCell amountColumn`}>\n                    {formatter.format(expense.amount)}\n                </td>\n                <td onClick={this.toggleEdit} id=\"mycheckbox\" className={`${expense.category} listExpense myTableCell √Column`}>\n                    {expense.ischecked}\n                </td>\n                <td onClick={this.toggleEdit} className={`${expense.category} listExpense myTableCell notesColumn`}>\n                    {expense.notes}\n                </td>\n                <td onClick={this.toggleEdit} className={`${expense.category} listExpense myTableCell categoryColumn`}>\n                    {expense.category}\n                </td>\n                <td className=\"myTableCell balanceColumn listExpense\">\n                    {formatter.format(expense.running_total)}\n                </td>\n                <td className=\"myTableCell deleteSaveColumn\" style={styles.colSix}>\n                <span style={styles.edit} className=\"fa\" onClick={this.props.deleteReserveExpense}><span className=\"hoverdelete\"> &#xf014;</span></span>\n                </td>\n               </tr>\n\n               </>\n\n\n\n                }\n\n        </>\n        )\n    }\n   \n}\n\nlet styles = {\n  \n   \n    colTwo: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colThree: {\n        width: 100,\n        textAlign: \"right\",\n        paddingRight: \"10px\"\n    },\n    colFour: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"20px\"\n    },\n    colFive: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colSix: {\n        width: 100\n    },\n    icon: {\n        fontSize: '25px',\n        cursor: 'pointer',\n    },\n\n    edit: {\n        fontSize: 25,\n        cursor: 'pointer'\n    },\n    checkbox: {\n        width: 15\n    },\n    notes: {\n        width: '100px'\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\nvar today = new Date();\nvar date = (today.getMonth() + 1) + '/' + today.getDate();\n\n//var fulldate = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\n\nclass AddReserveExpense extends Component {\n    constructor(props) {\n        super(props)\n\n        let { user } = this.props\n        let userid = user && user.id\n\n        this.state = {\n            name: '',\n            date: date,\n            amount: '',\n            notes: '',\n            ischecked: '',\n            category: 'reserve',\n            userid: userid,\n\n            expenses: [],\n            categories: [],\n\n            add: false\n        }\n    }\n\n    componentDidMount() {\n        axios.get('/api/categories').then((res) => {\n            this.setState({\n                categories: res.data\n            })\n        }).catch(err => console.log('error getting expenses:', err))\n    }\n\n    handleChange = e => {\n        // console.log(1111, this.state.ischecked)\n        let { value, name } = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleClick = () => {\n\n        let { user } = this.props\n        let userid = user && user.id\n\n        let newReserveExpense = this.state\n        // console.log(333, newReserveExpense)\n        this.props.createReserveExpense(newReserveExpense)\n        this.setState({\n            name: '',\n            date: date,\n            amount: '',\n            ischecked: '',\n            notes: '',\n            category: 'reserve',\n            userid: userid,\n\n            add: false\n        })\n    }\n\n    toggleAdd = () =>\n        this.setState({\n            add: !this.state.add\n        })\n\n    toggleChange = () => {\n        this.setState({\n            ischecked: !this.state.ischecked // flip boolean value\n        })\n    }\n\n    render() {\n        return (\n            <>\n\n                <tr>\n                    <td className=\"dateColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"dateColumn listExpense\"\n                            name=\"date\"\n                            placeholder=\"Date\"\n                            onChange={this.handleChange}\n                            value={this.state.date} />\n                    </td>\n                    <td className=\"nameColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            name=\"name\"\n                            placeholder=\" Enter Name\"\n                            onChange={this.handleChange}\n                            value={this.state.name} />\n                    </td>\n                    <td className=\"amountColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            name=\"amount\"\n                            style={styles.notes}\n                            placeholder=\"Enter Amt\"\n                            onChange={this.handleChange}\n                            value={this.state.amount} />\n                    </td>\n                    <td className=\"√Column myAddCell\">\n                    </td>\n                    <td className=\"notesColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            style={styles.notes}\n                            name=\"notes\"\n                            placeholder=\"Enter Note\"\n                            onChange={this.handleChange}\n                            value={this.state.notes}\n                        />\n                    </td>\n\n                    <td className=\"categoryColumn myAddCell\">\n                    {/* <select className=\"listExpense\"\n                                name=\"category\" onChange={this.handleChange}>\n                                    value={'reserve'}\n                                Selected<option>Choose Category</option>\n                                {this.state.categories.map((category) => {\n                                    return (\n                                        <option\n                                            key={category.id}\n                                            value={category.categoryname}>{category.categoryname}</option>\n                                    )\n                                })}\n                            </select> */}\n                            <span value=\"reserve\" name=\"category\">reserve</span>\n                    </td>\n                    <td className=\"balanceColumn myAddCell\">\n                        <button style={styles.saveButton}  onClick={this.handleClick}>Save</button>\n                    </td>\n                    <td className=\"deleteSaveColumn myAddCell\">\n                        <input\n                            type=\"text\"\n                            className=\"listExpense\"\n                            name=\"fulldate\"\n                            onChange={this.handleChange}\n                            value={this.state.fulldate}\n                        />\n                    </td>\n                </tr>\n\n            </>\n        )\n\n    }\n}\n\nlet styles = {\n\n    colOne: {\n        width: 100\n    },\n    colTwo: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colThree: {\n        width: 75,\n        textAlign: \"right\",\n        paddingLeft: \"10px\"\n    },\n    colFour: {\n        width: 100,\n        textAlign: \"left\",\n        paddingLeft: \"20px\"\n    },\n    colFive: {\n        width: 75,\n        textAlign: \"left\",\n        paddingLeft: \"10px\"\n    },\n    colSix: {\n        width: 200\n    },\n    icon: {\n        fontSize: '25px',\n        cursor: 'pointer',\n    },\n    date: {\n        width: '50px'\n    },\n    checkbox: {\n        width: '10px'\n    },\n    notes: {\n        width: '100px'\n    },\n    select: {\n        fontFamily: 'Times New Roman',\n        fontSize: '16px',\n        fontWeight: 'bold'\n    },\n    saveButton: {\n        backgroundColor: 'green',\n        color: 'white',\n        fontSize: '15px'\n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(AddReserveExpense)","import React, { Component } from 'react'\nimport axios from 'axios';\nimport swal from 'sweetalert';\nimport LandingPage from './LandingPage'\n// import {Link} from 'react-router-dom';\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\nimport ListReserveExpenses from './ListReserveExpenses'\nimport AddReserveExpense from './AddReserveExpense'\n// import ShowMonthTotals from './ShowMonthTotals'\n// import AddMonth from './AddMonth';\n// import Header from './Header';\n// import FixedExpenses from './FixedExpenses'\n\n//var today = new Date();\n//var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n//var year = today.getFullYear();\n//var month = today.getMonth() + 1\n\n//display number in us currency format\n// const formatter = new Intl.NumberFormat('en-US', {\n//     style: 'currency',\n//     currency: 'USD',\n//     minimumFractionDigits: 2\n// })\n\nclass ReserveExpenses extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            expenses: [],\n            categories: [],\n            month: '',\n            year: '',\n            display: false,\n            create: false,\n            edit: false\n        }\n    }\n\n    //function to toggle between display expense and edit expense\n    toggleEdit = () =>\n        this.setState({\n            edit: !this.state.edit\n        })\n\n    toggleDisplay = () =>\n        this.setState({\n            display: !this.state.display\n        })\n\n    toggleCreate = () => {\n        this.setState({\n            create: !this.state.create\n        })\n        }\n\n    componentDidMount() {\n\n        let { user } = this.props\n        let userid = user && user.id\n\n        console.log(\"ReserveExpensesCDM:\", userid)\n       \n        axios.get('/api/reserveexpenses', {\n            params: {\n                \n                userid: userid\n            }\n        }).then((res) => {\n            this.setState({\n                expenses: res.data\n            })\n        }).catch(err => console.log('error getting expenses:', err))\n\n          //keep user logged in after refresh\n          this.props.getUser()\n\n    }\n\n\n    handleChange = e => {\n        \n        let { value, name } = e.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    setMonth = (month, year) => {\n        this.setState({\n            month: month,\n            year: year\n        })\n    }\n    \n\n    createReserveExpense = newReserveExpense => {\n        // console.log(111, newReserveExpense)\n        axios.post('/api/reserveexpenses', newReserveExpense)\n            .then(res => {\n                this.setState({\n                    expenses: res.data\n                })\n            }).catch(err => console.log(err))\n    }\n\n\n    deleteReserveExpense = id => {\n        // from sweet alert\n        // console.log(555, id )\n        swal({\n            title: \"Are you sure?\",\n            text: \"Once deleted, you will not be able to recover this expense!\",\n            icon: \"warning\",\n            buttons: {\n                cancel: \"No, Don't Delete!\",\n                dangerMode: \"Yes, Delete It!\",\n            },\n            \n          })\n          .then((willDelete) => {\n            if (willDelete) {\n\n                let { user } = this.props\n                let userid = user && user.id\n\n                //console.log(2222, id)\n            axios.delete(`/api/reserveexpenses/${id}&${userid}`)\n            .then(res => this.setState({ expenses: res.data }))\n            .catch(err => console.log(err))\n              swal(\"Poof! Your expense has been deleted!\", {\n                icon: \"success\",\n              });\n            } else {\n              swal(\"Your reserve expense is safe!\");\n            }\n          });\n    }\n    \n    handleClear = () => {\n        this.setState({\n            name: '',\n            date: '',\n            amount: '',\n            ischecked: '',\n            notes: '',\n            category: '',\n            class: ''\n        })\n\n    }\n\n    updateReserveExpense = expense => {\n        axios.put(`/api/reserveexpenses/${expense.id}`, expense)\n            .then(res => this.setState({ expenses: res.data }))\n            .catch(err => console.log(err))\n            // alert(\"Changes Saved\")\n    }\n\n    render() {\n        // let beginningBalance = 8000\n        // console.log(11111, this.state.expenses)\n        \n        //console.log(1111, this.state.monthlist)\n\n        let { user } = this.props\n        return (\n            <div className=\"wrapper\">\n                \n\n            <div className=\"fixtop\">\n            \n            <>    \n        {user? // Only show months, totals, create month, and expenses if user is logged in\n            <span>\n                \n                 <div><h2>Reserve Account</h2></div>\n                 <div>\n                    \n                 </div>\n                 \n                 <table>\n                 <tbody>\n                 <tr>\n                                <td className=\"dateColumn myHeaderCell\"><h3>Date</h3></td>\n                                <td className=\"nameColumn myHeaderCell\"><h3>Name</h3></td>\n                                <td className=\"amountColumn myHeaderCell\"><h3>Amount</h3></td>\n                                <td className=\"√Column myHeaderCell\"><h3>√</h3></td>\n                                <td className=\"notesColumn myHeaderCell\"><h3>Notes</h3></td>\n                                <td className=\"categoryColumn myHeaderCell\"><h3>Category</h3></td>\n                                <td className=\"balanceColum myHeaderCell\"><h3>Balance</h3></td>\n                                <td className=\"deleteSaveColumn myHeaderCell\"><h3>Del/Save</h3></td>\n                </tr>\n               \n                \n                    \n                {this.state.expenses.map((expense, index) => {\n                    return (\n                        <ListReserveExpenses\n                            key={index}\n                            expense={expense}\n                            updateExpense={this.updateReserveExpense}\n                            deleteReserveExpense={() => this.deleteReserveExpense(expense.id)}\n                             />\n\n                    )\n                })}\n                <AddReserveExpense createReserveExpense={this.createReserveExpense} />\n                </tbody>\n                </table>\n\n                </span>\n            :\n            <span>\n                <LandingPage />\n            </span>\n            }\n            </>\n               \n            </div>\n        \n                \n\n            </div>\n        )\n\n       \n\n        \n    }\n}\n\n//connect redux\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(ReserveExpenses)","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport EnterExpense from './components/EnterExpense';\nimport FixedExpenses from './components/FixedExpenses';\nimport EditCategories from './components/EditCategories';\nimport ShowMonthTotals  from './components/ShowMonthTotals';\nimport AddMonth from './components/AddMonth';\nimport ReserveExpenses from './components/ReserveExpenses';\n\nexport default (\n    <Switch>\n        <Route exact path=\"/\" component={EditCategories} />\n        <Route path=\"/FixedExpenses\" component={FixedExpenses} />\n        <Route path=\"/EnterExpense\" component={EnterExpense} />\n        <Route path=\"/ShowMonthTotals\" component={ShowMonthTotals} /> \n        <Route path=\"/AddMonth\" component={AddMonth} />  \n        <Route path=\"/ReserveExpenses\" component={ReserveExpenses} />\n    </Switch>\n)","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport LandingPage from './LandingPage'\n// import logo from './images/logo.jpg'\n\n//connect redux\nimport { connect } from 'react-redux'\nimport { getUser } from '../redux/reducers/user'\n\nfunction Header(props) {\n    let user = props && props.user\n\n    return(\n        <header>\n            {/* <section className=\"headerSection1\">\n                <Link to={'/'}>\n                    <img height=\"50px\" width=\"50px\" src={logo} alt=\"Logo\" />\n                </Link>\n\n            </section> */}\n            <section className=\"headerSectionMiddle\">\n            <input type=\"checkbox\" id=\"toggle\" />\n\n            \n            {user && //hide all menu items when user is not logged in\n                    \n                    <span className=\"menu\">\n\n                        <Link to={'EnterExpense'}>\n                            <span>Home</span>\n                        </Link>\n\n                        <Link to={'FixedExpenses'} >\n                            <span>Fixed Expenses</span>\n                        </Link>\n\n                        <Link to={'/ReserveExpenses'}>\n                            <span>Reserve Account</span>\n                        </Link>\n\n                        {/* <Link to={'AddMonth'} >\n                            <span></span>Create New Month</span>\n                        </Link> */}\n\n                        {/* <Link to={'FixedExpenses'} >\n                            <span></span>Change Month</span>\n                        </Link> */}\n\n                        <Link to={'/'} >\n                            <span> Categories</span>\n                        </Link>\n\n                    </span>\n\n            //end of hidden items when user is not logged in     \n            }\n            </section>\n            <section className=\"headerSection2\">\n                {user && <LandingPage />}\n                <label htmlFor=\"toggle\" className=\"label\">&#9776;</label>\n                \n            </section>\n        </header>\n    )\n}\n\nlet mapStateToProps = state => {\n    let { data: user } = state.user\n    return { user }\n}\n\nexport default connect(mapStateToProps, { getUser })(Header)","import React from 'react';\nimport './App.css';\nimport {HashRouter} from 'react-router-dom';\nimport routes from './routes'\nimport Header from './components/Header'\n//import EnterExpense from './components/EnterExpense'\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n      <Header />\n      {routes}\n    </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import axios from 'axios'\n\nconst GET_RENTALS = 'GET_RENTALS'\nconst GET_RENTALS_FULFILLED = 'GGET_RENTALS_FULFILLED'\nconst GET_RENTALS_PENDING = 'GET_RENTALS_PENDING'\n\nconst GET_RENTAL = 'GET_RENTAL'\nconst GET_RENTAL_FULFILLED = 'GET_RENTAL_FULFILLED'\nconst GET_RENTAL_PENDING = 'GET_RENTAL_PENDING'\n\nlet initialState = {\n    data: [],\n    loading: false,\n    selected: null,\n    rentals: []\n}\n\nexport default function(state = initialState, action) {\n    switch (action.type) {\n        case GET_RENTALS_PENDING:\n            return { ...state, loading: true}\n        case GET_RENTALS_FULFILLED:\n            return { ...state, loading: false, data: action.payload.data }\n\n        case GET_RENTAL_PENDING:\n            return { ...state, loading: true }\n        case GET_RENTAL_FULFILLED:\n            return { ...state, loading: false, selected: action.payload.data }\n        default:\n            return state;\n    }\n}\n\nexport function getRentals() {\n    return {\n        type: GET_RENTALS,\n        payload: axios.get('/api/rentals')\n    \n    }\n}\n\nexport function getRental(id) {\n    return {\n        type: GET_RENTAL,\n        payload: axios.get(`/api/rental/${id}`)\n    }\n}","import { combineReducers } from 'redux'\n\nimport user from './user'\nimport month from './month'\n\nexport default combineReducers({ user, month })","import { createStore, applyMiddleware } from 'redux'\nimport promiseMiddleware from 'redux-promise-middleware'\n\nimport reducer from './reducers'\n\nexport default \ncreateStore(\n    reducer, applyMiddleware(promiseMiddleware)\n\n    )\n\n    // applyMiddleware(promiseMiddleware)\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\n\nimport store from './redux/store'\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n"],"sourceRoot":""}